// import React from 'react'
// import { render, fireEvent, screen } from '../test/components.unit.wrapper';
// import PersonalTrainingCourses from "./PersonalTrainingCourses";

// it('Renders the connected app with initialState', () => {
//     render(<PersonalTrainingCourses />,
//         {
//             initialState:
//             {
//                 user: 'Redux User'
//             }
//         })

//     expect(screen.getByText(/redux user/i)).toBeInTheDocument()
// });

// import React from 'react';
// import configureStore from 'redux-mock-store';
// import { Provider } from 'react-redux';
// import renderer from 'react-test-renderer';
// import PersonalTrainingCourses from "./PersonalTrainingCourses";

// const mockStore = configureStore([]);

// describe('My Connected React-Redux Component', () => {
//     let store;
//     let component;

//     beforeEach(() => {
//         store = mockStore({
//             state: {
//                 academyApp: {
//                     courses: {
//                         totalNo: 90,
//                         courses: [],
//                         categories: {
//                             row: []
//                         }
//                     },
//                     employees: {
//                         employees: []
//                     }
//                 }
//             }
//         });

//         component = renderer.create(
//             <Provider store={store}>
//                 <PersonalTrainingCourses />
//             </Provider>
//         );
//     });

//     afterEach(() => {
//         store = null;
//         component = null
//     });

//     it('should render with given state from Redux store', () => {
//         expect(component.toJSON()).toMatchSnapshot();
//     });

//     // it('should render with given state from Redux store', () => {
//     // });

//     // it('should dispatch an action on button click', () => {
//     // });
// });

// test('use jsdom in this test file', () => {
//     const element = document.createElement('div');
//     expect(element).not.toBeNull();
// });